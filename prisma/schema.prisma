
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// prisma/schema.prisma

<<<<<<< HEAD
model Contact {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String
  phone      String?
  address    String?
  subject    String
  message    String
  newsletter Boolean
  createdAt  DateTime @default(now())
}

=======
>>>>>>> f1994565b32afe4b3f135725c7e91c004995447d
model User {
  id            Int       @id @default(autoincrement())
  firstName     String?  
  lastName      String?  
  username      String   @unique
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  articles      Article[] @relation("UserArticles")
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}
model Article {
  id       Int      @id @default(autoincrement())
  title    String
  slug     String   @unique
  content  String
  comments Comment[]
  author   User     @relation("UserArticles", fields: [authorId], references: [id])
  authorId Int
}

model Comment {
<<<<<<< HEAD
  id             Int       @id @default(autoincrement())
  content        String?
  createdAt      DateTime? @default(now())
  article        Article?  @relation(fields: [articleId], references: [id])
  articleId      Int?
  author         User?     @relation(fields: [authorId], references: [id])
  authorId       Int?
=======
  id             Int      @id @default(autoincrement())
  content        String
  createdAt      DateTime @default(now())
  article        Article  @relation(fields: [articleId], references: [id])
  articleId      Int
  author         User     @relation(fields: [authorId], references: [id])
  authorId       Int
>>>>>>> f1994565b32afe4b3f135725c7e91c004995447d
  authorUsername String?
}


model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
